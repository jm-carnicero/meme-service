apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: save-configuration
spec:
  params:
    - description: path of the manifest file in the source workspace
      name: manifest
      type: string
    - description: name of the app
      name: app-name
      type: string
    - description: sha of the current commit
      name: sha
      type: string
  results:
    - description: The HEAD commit SHA from the target repository
      name: commit
  steps:
    - env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: GIT_PROTOCOL
          valueFrom:
            configMapKeyRef:
              key: protocol
              name: production-repository
              optional: true
        - name: GIT_HOST
          valueFrom:
            configMapKeyRef:
              key: host
              name: production-repository
        - name: GIT_ORG
          valueFrom:
            configMapKeyRef:
              key: org
              name: production-repository
        - name: GIT_REPO
          valueFrom:
            configMapKeyRef:
              key: repo
              name: production-repository
        - name: GIT_BRANCH
          valueFrom:
            configMapKeyRef:
              key: branch
              name: production-repository
              optional: true
      image: 'quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4'
      name: gitops
      resources: {}
      script: >
        #!/usr/bin/env bash

        set -e


        trap 'catch $? $LINENO' EXIT ERR


        catch() {
          if [ "$1" != "0" ]; then
            echo "Error $1 occurred on $2"
          fi
        }


        GIT_USERNAME=$(cat git-credentials/username)


        if [[ -z "${GIT_USERNAME}" ]]; then
          echo "Username for GitOps repo not set in secret git-credentials"
          exit 1
        fi


        GIT_PASSWORD=$(cat git-credentials/password)


        if [[ -z "${GIT_PASSWORD}" ]]; then
           echo "Password for GitOps repo not set in secret git-credentials"
           exit 1
        fi


        if [[ -z "${NAMESPACE}" ]]; then
           echo "NAMESPACE is not set"
           exit 1
        fi


        if [[ -z "$(params.app-name)" ]]; then
           echo "app-name not set"
           exit 1
        fi


        if [[ -z "$(params.sha)" ]]; then
           echo "sha not set"
           exit 1
        fi


        APP_NAME="$(params.app-name)"

        SHA="$(params.sha)"


        BRANCH_CMD=""

        if [[ -n "${GIT_BRANCH}" ]]; then
          BRANCH_CMD="-b ${GIT_BRANCH}"
        fi


        PROTOCOL="${GIT_PROTOCOL}"

        if [[ -z "${PROTOCOL}" ]]; then
          PROTOCOL="https"
        fi


        git config --global user.email "${APP_NAME}@${NAMESPACE}"

        git config --global user.name "${NAMESPACE}/${APP_NAME}"


        cd $(workspaces.target.path)


        echo "git clone ${BRANCH_CMD}
        ${PROTOCOL}://${GIT_USERNAME}:<redacted>@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"


        GIT_URL="${PROTOCOL}://${GIT_USERNAME}:${GIT_PASSWORD}@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"

        git clone ${BRANCH_CMD} ${GIT_URL} git-ops

        cd git-ops


        mkdir -p ${NAMESPACE}/${APP_NAME}/

        cp ../../source/$(params.manifest) ${NAMESPACE}/${APP_NAME}/


        if [[ $(git status -s | wc -l) -eq 0 ]]; then
          echo "No changes"
        else
          git add "${NAMESPACE}/${APP_NAME}/."
          git commit -m "update ${NAMESPACE}/${APP_NAME} to ${SHA}"
          git push
        fi


        RESULT_SHA="$(git rev-parse HEAD)"

        EXIT_CODE="$?"

        if [ "$EXIT_CODE" != 0 ] ; then
          exit $EXIT_CODE
        fi


        echo -n "$RESULT_SHA" > $(results.commit.path)
  workspaces:
    - description: contains the cloned git repo
      name: source
    - description: contains the cloned target git repository
      name: target
    - name: git-credentials
